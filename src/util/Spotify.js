const clientId = "46aac5138b4f40408953aacc8d540c60";
let accessToken;
let expiresIn  = 0;
const redirectUri = "https://mark_law_jammming.surge.sh";
const Spotify = {
  getAccessToken() {
    if (localStorage.getItem('accessToken') &&
        Date.parse(localStorage.getItem('accessToken_expiresIn')) > new Date().getTime()) {
      return localStorage.getItem('accessToken');
    }

    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);
    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);
    if (accessTokenMatch && expiresInMatch) {
      accessToken = accessTokenMatch[1];
      const expiresIn = Number(expiresInMatch[1]);
      console.log('expiresIn: '+ expiresIn);
      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.
      localStorage.setItem('accessToken', accessToken);
      localStorage.accessToken_expiresIn = new Date().getTime()+(expiresIn * 1000);
      return accessToken;
    } else {
      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-private&redirect_uri=${redirectUri}`;
      window.location = accessUrl;
    }
  },

  search(searchTerm, pageNumber){
    localStorage.setItem('searchTerm', searchTerm);
    localStorage.setItem('pageNumber', pageNumber);
    const accessToken = Spotify.getAccessToken();

    if(localStorage.getItem('searchTerm') && localStorage.getItem('pageNumber')){
      searchTerm = localStorage.getItem('searchTerm');
      pageNumber = localStorage.getItem('pageNumber');
      console.log('in if searchTerm: ' + searchTerm);
      console.log('in if pageNumber: ' + pageNumber);
    }
    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}&limit=10&offset=${pageNumber*10}`, {
      headers:{
        Authorization: `Bearer ${accessToken}`
      }
    }).then(response=>{
        return response.json();
    }).then(jsonResponse => {
        if(jsonResponse.tracks){
          console.log(jsonResponse.tracks);
          if(!jsonResponse.tracks){
            return [];
          }
          return jsonResponse.tracks.items.map(track => ({
                id: track.id,
                name: track.name,
                artist: track.artists[0].name,
                album: track.album.name,
                uri: track.uri,
                preview_url: track.preview_url,
          }));
        }
    });
  },

  savePlaylist(playlistName, trackUris){

    if(playlistName && trackUris){
      const accessToken = Spotify.getAccessToken();
      const headers = {Authorization:`Bearer ${accessToken}`};
      let userId;
      return fetch('https://api.spotify.com/v1/me', {headers:headers}).then(
          x => new Promise(resolve => setTimeout(() => resolve(x), 1000))).then(
        response =>{
          return response.json();
        }).then(
          jsonResponse => {
            userId = jsonResponse.id;
            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{
              headers: headers,
              method: 'POST',
              body: JSON.stringify({name: playlistName,
                     description: 'generated by marklawstudio',
                     public: true
                    })
            }).then(response=>{
              return response.json();
            }).then(jsonResponse=>{
              let playlistID = jsonResponse.id;
              return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks
                  `, {
                    headers:headers,
                    method: 'POST',
                    body: JSON.stringify({
                      uris: trackUris
                    })
                  });
            });
        });
    }else{
      return;
    }
  }
};


export default Spotify;
